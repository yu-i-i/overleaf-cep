extends ../../../../../app/views/layout-react

block append meta
  meta(name="ol-usersBestSubscription" data-type="json" content=usersBestSubscription)
  meta(name="ol-notifications" data-type="json" content=notifications)
  meta(name="ol-notificationsInstitution" data-type="json" content=notificationsInstitution)
  meta(name="ol-userEmails" data-type="json" content=userEmails)
  meta(name="ol-allInReconfirmNotificationPeriods" data-type="json" content=allInReconfirmNotificationPeriods)
  meta(name="ol-user" data-type="json" content=user)
  meta(name="ol-userAffiliations" data-type="json" content=userAffiliations)
  meta(name="ol-reconfirmedViaSAML" content=reconfirmedViaSAML)
  meta(name="ol-survey" data-type="json" content=survey)
  meta(name="ol-tags" data-type="json" content=tags)
  meta(name="ol-portalTemplates" data-type="json" content=portalTemplates)
  meta(name="ol-prefetchedProjectsBlob" data-type="json" content=prefetchedProjectsBlob)
  if (suggestedLanguageSubdomainConfig)
    meta(name="ol-suggestedLanguage" data-type="json" content=Object.assign(suggestedLanguageSubdomainConfig, {
      lngName: translate(suggestedLanguageSubdomainConfig.lngCode),
      imgUrl: buildImgPath("flags/24/" + suggestedLanguageSubdomainConfig.lngCode + ".png")
    }))
  meta(name="ol-currentUrl" data-type="string" content=currentUrl)
  meta(name="ol-showGroupsAndEnterpriseBanner" data-type="boolean" content=showGroupsAndEnterpriseBanner)
  meta(name="ol-groupsAndEnterpriseBannerVariant" data-type="string" content=groupsAndEnterpriseBannerVariant)
  meta(name="ol-showInrGeoBanner" data-type="boolean" content=showInrGeoBanner)
  meta(name="ol-showBrlGeoBanner" data-type="boolean" content=showBrlGeoBanner)
  meta(name="ol-recommendedCurrency" data-type="string" content=recommendedCurrency)
  meta(name="ol-showLATAMBanner" data-type="boolean" content=showLATAMBanner)
  meta(name="ol-groupSubscriptionsPendingEnrollment" data-type="json" content=groupSubscriptionsPendingEnrollment)
  meta(name="ol-hasIndividualRecurlySubscription" data-type="boolean" content=hasIndividualRecurlySubscription)
  meta(name="ol-groupSsoSetupSuccess" data-type="boolean" content=groupSsoSetupSuccess)
  meta(name="ol-showUSGovBanner" data-type="boolean" content=showUSGovBanner)
  meta(name="ol-usGovBannerVariant" data-type="string" content=usGovBannerVariant)

block css
  style.
    .edit-icon {
      display: none;
    }
    .user-name:hover .edit-icon {
      display: inline-block;
    }
    .edit-save-icon, .edit-cancel-icon {
      margin-left: 5px;
    }
    .form-control:focus {
      box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25); /* Bootstrap-style focus */
    }
    /* Ensure consistent width during editing */
    .user-name {
      display: block;
      width: 100%;
      min-width: 200px;
    }
    /* Fixed width for name column */
    table td:nth-child(3),
    table th:nth-child(3) {
      width: 200px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
 
block append meta
  link(rel='stylesheet', href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css", id="main-stylesheet")  

block content
  .content.content-alt#main-content
    .container
      .row
        .col-sm-12
          .card
            .card-body
              .page-header
                h1 Users list
                if users.length
                  table.table.table-striped
                    thead
                      tr
                        th #{translate('email')}
                        th #{translate('name')}
                        th #{translate('institution')}
                        th #{translate('sign_up')} #{translate('date')}
                        th #{translate('login_count')}
                        th #{translate('last_logged_in')}
                        th #{translate('projects_count')}
                        th #{translate('file_size')}
                        th #{translate('admin')}
                        th #{translate('status')}
                    tbody
                      each user in users
                        tr              
                          td #{user.email}
                          td
                            div.user-name(
                              data-user-id=user._id
                              data-original-name=(user.first_name || '') + ', ' + (user.last_name || '')
                              style="width: 200px; min-width: 200px;"
                            )
                              span.name-text #{user.first_name || ''}, #{user.last_name || ''}
                              i.bi.bi-pencil.edit-icon(
                                title=translate('edit'),
                                style="cursor: pointer; margin-left: 5px;" 
                                data-user-id=user._id
                              )
                          td #{user.institution || ''}
                          td #{user.signUpDateformatted ? user.signUpDateformatted: ''}
                          td #{user.loginCount || ''}              
                          td #{user.lastLoggedInformatted ? user.lastLoggedInformatted: ''}
                          td
                            span.me-2 #{user.projectsCount || 0}                
                          td #{user.projectsSizeFormatted || 0}
                          td #{user.isAdmin ? translate('yes') : translate('no')}
                          td
                            span.badge(class=(user.suspended ? 'bg-secondary' : 'bg-success')) 
                              #{user.suspended ? translate('suspended') : translate('active')}
                            if user._id.toString() !== currentUserId
                              form.d-inline(method="POST", action=`/admin/users/${user._id}/${user.suspended ? 'unsuspend' : 'suspend'}`)
                                input(type="hidden", name="_csrf", value=csrfToken)
                                button.btn.btn-sm(
                                  class=(user.suspended ? 'btn-success' : 'btn-danger'),
                                  type="submit",
                                  data-bs-toggle="tooltip",
                                  title=(user.suspended ? translate('activate') : translate('suspend')),
                                ) #{user.suspended ? translate('suspended') : translate('active')}
                else
                  p There are no registered users.


block head-scripts
  script(type="text/javascript", nonce=scriptNonce).
    // Enable editing functionality for user names
    function enableEdit(icon) {
      // Prevent editing multiple rows
      if (currentlyEditingRow != null) {                return;      }

      const container = icon.parentElement;
      const userId = icon.getAttribute("data-user-id");
      const originalName = container.getAttribute("data-original-name");
      [firstName, lastName] = originalName.split(",").map(str => str.trim());
      if (lastName === undefined) {                lastName = '';      }

      // Save reference to current row being edited
      currentlyEditingRow = container;

      // Replace content with editable inputs and buttons
      container.innerHTML = `
        <input type="text" class="form-control form-control-sm d-inline-block w-auto me-1" value="${firstName}" data-first-name>
        <input type="text" class="form-control form-control-sm d-inline-block w-auto me-1" value="${lastName}" data-last-name>
        <i class="bi bi-save edit-save-icon" title="#{translate('save')}" style="cursor: pointer;" data-user-id="${userId}"></i>
        <i class="bi bi-x-circle edit-cancel-icon" title="#{translate('cancel')}" style="cursor: pointer; margin-left: 5px;" data-user-id="${userId}"></i>
      `;

      // Add Enter key listener to input fields
      const firstInput = container.querySelector('[data-first-name]');
      const lastInput = container.querySelector('[data-last-name]');

      // Function to trigger save on Enter or discard on Escape
      const handleKeys = (e) => {
        if (e.key === 'Enter') {
          e.preventDefault(); // Prevent form submission
          saveChanges(container, userId);
        }

        if (e.key === 'Escape') {
          e.preventDefault(); // Prevent form submission
          const container = currentlyEditingRow;
          const userId = container.getAttribute("data-user-id");
          discardChanges(container.firstChild, userId);
        }
      };

      // Attach event listener to both input fields
      firstInput.addEventListener('keydown', handleKeys);
      lastInput.addEventListener('keydown', handleKeys);

      firstInput.focus();
    }

  script(type="text/javascript", nonce=scriptNonce).
    // Save changes made to the user name
    function saveChanges(icon, userId) {
      const container = icon.parentElement;
      const firstName = container.querySelector('[data-first-name]').value;
      const lastName = container.querySelector('[data-last-name]').value;
      const csrfToken = document.querySelector('input[name="_csrf"]').value;
      
      fetch('/admin/users/settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
        body: JSON.stringify({
                    userId: userId,
                    first_name: firstName,
                    last_name: lastName,
                    _csrf: csrfToken
        }),       
        credentials: 'same-origin'
      })
      .then(response => {
        if (!response.ok) throw new Error('Error en la solicitud');
        return response.json();
      })
      .then(data => {
        // Restore original view
        icon.innerHTML = `
          <span class="name-text">${firstName}, ${lastName}</span>
          <i class="bi bi-pencil edit-icon" style="cursor: pointer; margin-left: 5px;" data-user-id="${userId}"></i>
        `;
        icon.setAttribute("data-original-name", `${firstName}, ${lastName}`);

        // Clear editing reference
        currentlyEditingRow = null;
      })
      .catch(error => {
        console.error('Error:', error);
      });
    }

  script(type="text/javascript", nonce=scriptNonce).
    function discardChanges(icon, userId) {
      const container = icon.parentElement;
      const originalName = container.getAttribute("data-original-name");

      // Restore original view
      container.innerHTML = `
        <span class="name-text">${originalName}</span>
        <i class="bi bi-pencil edit-icon" style="cursor: pointer; margin-left: 5px;" data-user-id="${userId}"></i>
      `;

      // Clear editing reference
      currentlyEditingRow = null;
    }

  script(type="text/javascript", nonce=scriptNonce).
    document.addEventListener("DOMContentLoaded", function() {
      currentlyEditingRow = null;      

      document.addEventListener("click", (event) => {
        if (event.target.classList.contains("edit-icon")) {
          enableEdit(event.target);
        } else if (event.target.classList.contains("edit-save-icon")) {
          const userId = event.target.getAttribute("data-user-id");
          saveChanges(event.target, userId);
        } else if (event.target.classList.contains("edit-cancel-icon")) {
          const userId = event.target.getAttribute("data-user-id");
          discardChanges(event.target, userId);
        }
      });
    })

  script(type="text/javascript", nonce=scriptNonce).
    document.querySelectorAll(".edit-icon").forEach(icon => {
        icon.addEventListener("click", () => enableEdit(icon));
    })    


